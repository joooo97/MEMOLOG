<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- #5. appServlet관련 빈설정: application내에 servlet이 여러 개 존재할 수 있다. -->
	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- webapp 밑의 resources로 요청이 들어올 경우 -->
	<!-- /resource/로 시작하는 요청은 servlet이 처리하지 않고, /resources/폴더의 자원을 제공한다. -->
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- #14.1 jsonView Bean 및 viewResolver 등록 -->
	<!-- 요청한 viewName과 실제bean이름을 매핑해주는 BeanNameViewResolver를 사용함. -->
    <!-- bean아이디는 viewResolver로 반드시 지정. 처리순서를 1로 우선처리되도록함. -->
    <beans:bean id="viewResolver" class="org.springframework.web.servlet.view.BeanNameViewResolver">
        <beans:property name="order" value="1"/>
    </beans:bean>   
	<beans:bean id="jsonView" class="net.sf.json.spring.web.servlet.view.JsonView"/> <!-- 컨트롤러의 setViewName과 id가 같아야 함 -->
	
	
	<!-- context namespace의 component-scan -->
	<!-- 스프링컨테이너에 bean을 등록 :
	 지정한패키지를 포함, 하위의 모든 @Component어노테이션이 붙은 클래스를 bean으로 생성 관리함.
	 그 때 bean의 이름은 소문자로 시작하는 클래스명이다. -->
	<context:component-scan base-package="com.jh.memolog" />
	
	<!-- #15.1 @Responsebody사용을 위한 의존 : 빈등록 (스프링 5.x.x => MappingJackson2HttpMessageConverter) -->
	<beans:bean id="jacksonMessageConverter" 
				class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter" />


	<beans:bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<beans:property name="messageConverters">
			<beans:list>
				<beans:ref bean="jacksonMessageConverter"/>
                <beans:bean class="org.springframework.http.converter.ByteArrayHttpMessageConverter" />
			</beans:list>
		</beans:property>
	</beans:bean>
	
	<!-- #9. 인터셉터 등록 -->
	<interceptors>
 		<interceptor>
			<mapping path="/**"/>
			<exclude-mapping path="/signUp"/>
 			<exclude-mapping path="/login"/>
			<exclude-mapping path="/checkIdDuplicate"/>
			<beans:bean id="loginInterceptor" class="com.jh.memolog.common.interceptor.LoginInterceptor"/>
		</interceptor>
		<!-- 로그아웃 후 뒤로가기 방지 -->
		<interceptor>
			<mapping path="/**"/>
			<beans:bean id="webContentInterceptor" class="org.springframework.web.servlet.mvc.WebContentInterceptor">
				<beans:property name="cacheSeconds" value="0" />
			    <beans:property name="useExpiresHeader" value="true" />
				<beans:property name="useCacheControlHeader" value="true" />
				<beans:property name="useCacheControlNoStore" value="true" />
		    </beans:bean>
		</interceptor>
	</interceptors>
	
	<!-- #12.1 파일업로드를 처리할 Resolver클래스 빈등록(빈이름 주의) -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">   
		<beans:property name="maxUploadSize" value="10485760" /> <!-- max 파일용량은 10MB이다. -->
	</beans:bean>
	
	
	
</beans:beans>
